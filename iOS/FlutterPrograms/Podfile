source 'https://github.com/CocoaPods/Specs.git'

platform:ios,’9.0’

inhibit_all_warnings!
use_frameworks!

flutter_application_path = '../../flutter_module'
load File.join(flutter_application_path, '.ios', 'Flutter', 'podhelper.rb')

# Load Flutter engine pod.
def install_flutter_engine_pod_user_define(flutter_application_path)
  engine_dir = File.join(flutter_application_path, 'engine')
  if !File.exist?(engine_dir)
    # Copy the debug engine to have something to link against if the xcode backend script has not run yet.
    # CocoaPods will not embed the framework on pod install (before any build phases can generate) if the dylib does not exist.
    debug_framework_dir = File.join(flutter_root, 'bin', 'cache', 'artifacts', 'engine', 'ios')
    FileUtils.mkdir_p(engine_dir)
    FileUtils.cp_r(File.join(debug_framework_dir, 'Flutter.framework'), engine_dir)
    FileUtils.cp(File.join(debug_framework_dir, 'Flutter.podspec'), engine_dir)
  end
end

def all_pods
    pod "AFNetworking"
    pod "SSZipArchive"
    pod "SVProgressHUD"
    pod "NNMacros"
    pod "Masonry"
    pod "FileMD5Hash"
end

target :FlutterPrograms do
    all_pods
    install_flutter_engine_pod_user_define(flutter_application_path)
    install_flutter_plugin_pods(flutter_application_path)
    install_flutter_application_pod(flutter_application_path)
    pod 'Flutter', :path => File.join(flutter_application_path, 'engine'), :configurations => ['Debug','Release']
    pod 'FlutterHotLoad', :path => '../flutter_frameworks/FlutterHotLoad.podspec', :configurations => ['DebugHotLoad','ReleaseHotLoad']
end

